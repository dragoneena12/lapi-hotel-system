package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	"context"
	"fmt"

	"github.com/dragoneena12/lapi-hotel-system/domain"
	"github.com/dragoneena12/lapi-hotel-system/graph/generated"
	"github.com/dragoneena12/lapi-hotel-system/graph/model"
)

// Checkin is the resolver for the checkin field.
func (r *mutationResolver) Checkin(ctx context.Context, input model.Check) (*model.Stay, error) {
	userID, err := r.authController.GetUserID(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get user ID: %w", err)
	}
	stay, err := r.stayController.Checkin(domain.Stay{
		HotelID: input.HotelID,
		UserID:  userID,
	}, input.Otp)
	if err != nil {
		return nil, fmt.Errorf("failed to checkin: %w", err)
	}
	return model.NewStayModel(*stay), nil
}

// AddHotel is the resolver for the addHotel field.
func (r *mutationResolver) AddHotel(ctx context.Context, input model.NewHotel) (*model.Hotel, error) {
	userID, err := r.authController.GetUserID(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get user ID: %w", err)
	}
	hotel, err := r.hotelController.Add(domain.Hotel{
		OwnerID:              userID,
		Name:                 input.Name,
		Location:             input.Location,
		CarbonAwards:         input.CarbonAwards,
		FullereneAwards:      input.FullereneAwards,
		CarbonNanotubeAwards: input.CarbonNanotubeAwards,
		GrapheneAwards:       input.GrapheneAwards,
		DiamondAwards:        input.DiamondAwards,
	})
	if err != nil {
		return nil, fmt.Errorf("failed to add hotel: %w", err)
	}
	return model.NewHotelModel(*hotel), nil
}

// EditHotel is the resolver for the editHotel field.
func (r *mutationResolver) EditHotel(ctx context.Context, input model.EditHotel) (*model.Hotel, error) {
	userID, err := r.authController.GetUserID(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get user ID: %w", err)
	}
	updatedHotel, err := r.hotelController.Edit(userID, domain.Hotel{
		Name:                 input.Name,
		Location:             input.Location,
		CarbonAwards:         input.CarbonAwards,
		FullereneAwards:      input.FullereneAwards,
		CarbonNanotubeAwards: input.CarbonNanotubeAwards,
		GrapheneAwards:       input.GrapheneAwards,
		DiamondAwards:        input.DiamondAwards,
	})
	if err != nil {
		return nil, fmt.Errorf("failed to edit hotel: %w", err)
	}
	return model.NewHotelModel(*updatedHotel), nil
}

// Stays is the resolver for the stays field.
func (r *queryResolver) Stays(ctx context.Context) ([]*model.Stay, error) {
	userID, err := r.authController.GetUserID(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get user ID: %w", err)
	}
	stays, err := r.stayController.List(userID, 1000)
	if err != nil {
		return nil, fmt.Errorf("failed to get stays: %w", err)
	}
	return model.NewStayModels(stays), nil
}

// StayCount is the resolver for the stayCount field.
func (r *queryResolver) StayCount(ctx context.Context) (int, error) {
	userID, err := r.authController.GetUserID(ctx)
	if err != nil {
		return 0, fmt.Errorf("failed to get user ID: %w", err)
	}
	count, err := r.stayController.Count(userID)
	if err != nil {
		return 0, fmt.Errorf("failed to get stay count: %w", err)
	}
	return count, nil
}

// Hotels is the resolver for the hotels field.
func (r *queryResolver) Hotels(ctx context.Context) ([]*model.Hotel, error) {
	hotels, err := r.hotelController.List(1000)
	if err != nil {
		return nil, fmt.Errorf("failed to get hotels: %w", err)
	}
	return model.NewHotelModels(hotels), nil
}

// Hotel is the resolver for the hotel field.
func (r *queryResolver) Hotel(ctx context.Context, id string) (*model.Hotel, error) {
	hotel, err := r.hotelController.GetById(id)
	if err != nil {
		return nil, fmt.Errorf("failed to get hotel: %w", err)
	}
	return model.NewHotelModel(*hotel), nil
}

// HotelKey is the resolver for the hotelKey field.
func (r *queryResolver) HotelKey(ctx context.Context, id string) (*model.HotelKey, error) {
	userID, err := r.authController.GetUserID(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get user ID: %w", err)
	}
	key, err := r.hotelController.GetKeyById(id, userID)
	if err != nil {
		return nil, fmt.Errorf("failed to get hotel key: %w", err)
	}
	return &model.HotelKey{Key: key}, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
